[@restout]
gencore=1
#
# Defaults: conv=json2ubf
# async - call service in async way, if submitted ok, just reply back with ok
#
# Hmm we could use same format for definding defaults...
defaults={"urlbase":"http://silodev.com"
	"errors":"http"
        ,"reqlogsvc": "GETFILE"
        ,"noreqfilersp": true
        }
        
service SYNCUBF={
	# This will be converted to "urlbase" from default to urlbase+url if starts with /
	# ie. http://silodev.com/func1
	# ----
	# If it will not start with /, then assume it is full URL.
	"url":"/func1",
	
	# Error handling modes:
	"errors":"http",
	# Allow only two codes 11 or 0, in case of http errors
	"errors_fmt_http_map":"404:11,200:0,*:11",
	
	########################################################################
	# "errors":"json"
	# in this case we will use 
	# ,"errfmt_json_code":"\"error_code1\""
	# ,"errfmt_json_msg":"\"error_message1\""
	# will use these fields as error transport.
	# Also, the error mapping will downgraded to 0 - ok, 11 - fail, for any
	# error. This will be hardcoded.
	# If using JSON errors, then use errfmt_json_onsucc flag too.
	# so that if flag is *false* and there is no error fields in json block
	# then assume that response is ok.
	########################################################################
	
	
	########################################################################
	# "errors":"text"
	# in this case we will use 
	# ,"errfmt_text":"%d: %s"
	# So when we get an response, we will try to parse the output
	# if parsed ok, then use standard error mapping 0, 11 - fail, any other
	# fail.
	# If did not parse ok the message, assume that response was ok.
	# this is effective in case if http error is ok. If there is http fail
	# then it is failure anyway.
	########################################################################
	
	
	########################################################################
	# "errors":"json2ubf"
	# In this case standard fields like EX_IF_ECODE and EX_IF_EMSG will
	# be used. We shall add new paramter 'errfmt_json2ubf_leave" - this if
	# set to *true*
	# will leave the error code & message in buffer so that caller can do
	# further analysis of the response code.
	########################################################################
	
	#
	# We do not need "conv" as it will use the incoming buffer as the format
	# for data delivery
	#
	
	
	# "async", if set to *true* will submit the message to outgoing channel
	# and do reply immediately.
	
	
	}

# json2UBF, errors JSON, sync
/svc1={"svc":"DATASV1", "notime":false, "conv":"json2ubf", "errors":"json", "async":false
	,"errfmt_json_code":"\"error_code1\":%d"
	,"errfmt_json_msg":"\"error_message1\":\"%s\""}
# Techo service:
/echo={"notime":false, "conv":"json2ubf", "errors":"json", "async":false, "echo":true}
# This should be the same as echo...
/svc1/async={"svc":"DATASV1", "notime":false, "conv":"json2ubf", "errors":"json", "async":true, "asyncecho":true}
# Have some timeout service...
# Long running, makes timeout
/longop/tout={"svc":"LONGOP", "notime":false, "conv":"json2ubf", "errors":"json"}
# This does not use the timeout, thus will succeed
/longop/ok={"svc":"LONGOP", "notime":true, "conv":"json2ubf", "errors":"json"}
# Test JSON2UBF error codes
/juerrors={"svc":"DATASV1", "notime":false, "conv":"json2ubf", "errors":"json2ubf", "async":false}
# Have some tests with http error codes
/httpe/ok={"svc":"DATASV1", "notime":false, "conv":"json2ubf", "errors":"http", "async":false}
# This will return server error
/httpe/fail={"svc":"FAILSV1", "notime":false, "conv":"json2ubf", "errors":"http", "async":false}
# Have the timeout test case too... with http
/httpe/tout={"svc":"LONGOP", "notime":false, "conv":"json2ubf", "errors":"http"}
# Test the error mapping of http
/httpe/tout/mapped={"svc":"LONGOP", "notime":false, "conv":"json2ubf", "errors":"http",
	"errors_fmt_http_map":"13:404,*:200"}
# Test JSON buffer format
/jsonbuf/ok={"svc":"JSONSV", "conv":"json", "errors":"json"}
# Test JSON buffer format, no error fields:
/jsonbuf/ok/no/status={"svc":"JSONSV", "conv":"json", "errors":"json", "errfmt_json_onsucc":false}
# Test JSON errors
/jsonbuf/fail={"svc":"FAILSV1", "conv":"json", "errors":"json"}
# Test Async JSON call
/jsonbuf/ok/async={"svc":"JSONSV", "conv":"json", "errors":"json", "async":true}
# Text buffer, ok
/text/ok={"svc":"TEXTSV", "conv":"text", "errors":"text", "async":false}
# text buffer, with error
/text/fail={"svc":"FAILSV1", "conv":"text", "errors":"text", "async":false}
# Async text call, async echo false
/text/ok/async={"svc":"TEXTSV", "conv":"text", "errors":"text", "async":true, "asyncecho":false}
# Async text call, async echo true
/text/ok/async/echo={"svc":"TEXTSV", "conv":"text", "errors":"text", "async":true, "asyncecho":true}
# Carray buffer, ok
/binary/ok={"svc":"BINARYSV", "conv":"raw", "errors":"text", "async":false}
# Carray buffer, fail
/binary/fail={"svc":"FAILSV1", "conv":"raw", "errors":"text", "async":false}
# Carray buffer, ok, async
/binary/ok/async={"svc":"BINARYSV", "conv":"raw", "errors":"text", "async":true, "asyncecho":false}
# Carray buffer, ok, async, echo
/binary/ok/async/echo={"svc":"BINARYSV", "conv":"raw", "errors":"text", "async":true, "asyncecho":true}

#
# TLS tests
#
[@restin/TLS]
tls_enable=1
tls_cert_file=${NDRX_APPHOME}/conf/localhost.crt
tls_key_file=${NDRX_APPHOME}/conf/localhost.key

        

# just call sample service
#/svc2/hello=@CCONF

# Default
#errors=http|json|text|jsonubf

#
# For text and raw buffers
#
#errors_fmt_text=Error code %d (%s)

#
# Add to the end of the json block
#
#errors_fmt_json_msg=error_msg:"%s"
#errors_fmt_json_code=error_code:"%d"
#
# Print the code even response is ok
#
#errors_fmt_json_when_ok=1
#
# XX:YY
# XX - TP error
# YY - HTTP error
#
#errors_fmt_http_map=11:404,6:402,*:200

#
# TLS Settigs
#
;tls_enable=1|0
;tls_cert_file=/path/to/cert/file
;tls_key_file=/path/to/key/file
;
;
