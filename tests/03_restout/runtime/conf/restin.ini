#
# JSON UBF test, sync
#
[@restin/1]
debug= ndrx=5 tp=5 ubf=0 iflags=detailed threaded=y
port=8080
ip=0.0.0.0
gencore=1
#
# Defaults: conv=json2ubf
# async - call service in async way, if submitted ok, just reply back with ok
#
# Hmm we could use same format for definding defaults...
defaults={"errors":"http"
        ,"reqlogsvc": "GETFILE"
        ,"noreqfilersp": true
        }

################################################################################
# JSON2UBF test cases, JSON2UBF error codes
################################################################################
/jubfjue_ok={"svc":"DATASV1", "notime":false, "conv":"json2ubf", "errors":"json2ubf", "async":false}

# This will return server error
/jubfjue_fail={"svc":"FAILSV1", "notime":false, "conv":"json2ubf", "errors":"json2ubf", "async":false}

# Time-out
/jubfjue_tout={"svc":"LONGOP", "notime":false, "conv":"json2ubf", "errors":"json2ubf", "async":false}
################################################################################
# JSON2UBF, http error codes
################################################################################
/jubfhte_ok={"svc":"DATASV1", "notime":false, "conv":"json2ubf", "errors":"http", "async":false}

# This will return server error
/jubfhte_fail={"svc":"FAILSV1", "notime":false, "conv":"json2ubf", "errors":"http", "async":false}

# Time-out
/jubfhte_tout={"svc":"LONGOP", "notime":false, "conv":"json2ubf", "errors":"http", "async":false}
################################################################################

################################################################################
# STRING, text error codes
################################################################################
/textte_ok={"svc":"TEXTSV", "notime":false, "conv":"text", "errors":"text", "async":false}

# This will return server error
/textte_fail={"svc":"FAILSV1", "notime":false, "conv":"text", "errors":"text", "async":false}
################################################################################
# JSON, json error fields
################################################################################
# Test JSON buffer format
/jsonje_ok={"svc":"JSONSV", "conv":"json", "errors":"json"}
# Test JSON buffer format, no error fields:
/jsonje_okns={"svc":"JSONSV", "conv":"json", "errors":"json", "errfmt_json_onsucc":false}
# Asyn json
/jsonje_okasync={"svc":"JSONSV", "conv":"json", "errors":"json", "async":true}
# Test JSON errors
/jsonje_fail={
	"svc":"FAILSV1"
	,"conv":"json"
	,"errors":"json"
	,"errfmt_json_msg":"\"message\":\"%s\""
	,"errfmt_json_code":"\"code\":%d"
	}
################################################################################
# Carray buffer, ok
################################################################################
/rawte_ok={"svc":"BINARYSV", "conv":"raw", "errors":"text", "async":false}
# Carray buffer, fail
/rawte_fail={"svc":"FAILSV1", "conv":"raw", "errors":"text", "async":false}
################################################################################
# ECHO, JSON2UBF
################################################################################
/echo_json2ubf={"notime":false, "errors":"json2ubf", "echo":true}
################################################################################
# ECHO, JSON
################################################################################
/echo_json={"notime":false, "errors":"json", "echo":true}
# Have some test for JSON http errors:
/dep_jsonhte={"svc":"JSONSV", "conv":"json", "errors":"http"}
################################################################################
# ECHO, STRING
################################################################################
/echo_string={"notime":false, "conv": "text", "errors":"text", "echo":true}
# Have some test for JSON http errors:
/dep_stringhte={"svc":"TEXTSV", "conv":"text", "errors":"http"}
################################################################################
# ECHO, RAW
################################################################################
/echo_raw={"svc":"BINARYSV", "conv":"raw", "errors":"text", "async":false, "echo":true}
/dep_rawhte={"svc":"BINARYSV", "conv":"raw", "errors":"http", "async":false}

################################################################################
# VIEW tests
################################################################################

#
# Response with response view, ubf2view errors
#
/viewerr/ok={"svc":"VIEWSV1", "conv":"json2view", "errors":"json2view",
        "errfmt_view_msg":"rspmessage", "errfmt_view_code":"rspcode", "errfmt_view_onsucc":true, 
        "errfmt_view_rsp":"RSPV"}

# Failed service with ubf2view
/viewerr/fail={"svc":"VIEWFAIL2"
		, "conv":"json2view"
		, "errors":"json2view"
		, "errfmt_view_msg":"rspmessage"
		, "errfmt_view_code":"rspcode"
		, "errfmt_view_onsucc":false
		, "errfmt_view_rsp":"RSPV"}

# Time-out
/viewerr/tout={"svc":"LONGOP2"
	, "notime":false
	, "conv":"json2view"
	, "errors":"json2view"
	, "errfmt_view_msg":"rspmessage"
	, "errfmt_view_code":"rspcode"
	, "errfmt_view_onsucc":false
	, "errfmt_view_rsp":"RSPV"}

# View http errors, OK
/viewhttp/ok={"svc":"VIEWSV1", "conv":"json2view", "errors":"http"}

# View http errors, FAIL
/viewhttp/fail={"svc":"VIEWFAIL2", "conv":"json2view", "errors":"http"}

# Echo test for view
/echo_json2view={"notime":false
	, "conv":"json2view"
	, "errors":"json2view"
	, "errfmt_view_onsucc":true
	, "errfmt_view_msg":"rspmessage"
	, "errfmt_view_code":"rspcode"
	, "echo":true}

#
# TLS tests
#
[@restin/1/TLS]
tls_enable=1
tls_cert_file=${NDRX_APPHOME}/conf/localhost.crt
tls_key_file=${NDRX_APPHOME}/conf/localhost.key


#
# JSON UBF test, sync
#
[@restin/bigmsg]
debug= ndrx=4 tp=4 ubf=0 iflags=detailed threaded=y
port=8181
ip=0.0.0.0
gencore=1
#
# Defaults: conv=json2ubf
# async - call service in async way, if submitted ok, just reply back with ok
#
# Hmm we could use same format for definding defaults...
defaults={"errors":"http"
        ,"reqlogsvc": "GETFILE"
        ,"noreqfilersp": true
        }

# Test case for big messages (1M)
/bigmsg={"svc":"BIGMSG", "notime":false, "conv":"json2ubf", "errors":"json2ubf", "async":false}

