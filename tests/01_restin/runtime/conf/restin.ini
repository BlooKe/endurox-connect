#
# JSON UBF test, sync
#
[RESTIN]
port=8080
ip=0.0.0.0
gencore=1
#
# Defaults: conv=json2ubf
# async - call service in async way, if submitted ok, just reply back with ok
#
# Hmm we could use same format for definding defaults...
defaults={"errors":"http"
        ,"errfmt_text":"Error code %d (%s)"
        ,"errfmt_json_code":"\"error_code\":%d"
        ,"errfmt_json_msg":"\"error_message\":\"%s\""
        ,"reqlogsvc": "GETFILE"
        ,"noreqfilersp": true
        }

#
# Test 1, json2UBF, errors JSON, sync
# Call with data and reply with data
#
/svc1={"svc":"DATASV1", "notime":false, "conv":"json2ubf", "errors":"json", "async":false}
/echo={"notime":false, "conv":"json2ubf", "errors":"json", "async":false, "echo":true}
# This should be the same as echo...
/svc1/async={"svc":"DATASV1", "notime":false, "conv":"json2ubf", "errors":"json", "async":true}
# Have some timeout service...
# Long running, makes timeout
/longop/tout={"svc":"LONGOP", "notime":false, "conv":"json2ubf", "errors":"json"}
# This does not use the timeout, thus will succeed
/longop/ok={"svc":"LONGOP", "notime":true, "conv":"json2ubf", "errors":"json"}
# Test JSON2UBF error codes
/juerrors={"svc":"DATASV1", "notime":false, "conv":"json2ubf", "errors":"json2ubf", "async":false}
# Have some tests with http error codes
/httpe/ok={"svc":"DATASV1", "notime":false, "conv":"json2ubf", "errors":"http", "async":false}
# This will return server error
/httpe/fail={"svc":"FAILSV1", "notime":false, "conv":"json2ubf", "errors":"http", "async":false}
# Have the timeout test case too... with http
/httpe/tout={"svc":"LONGOP", "notime":false, "conv":"json2ubf", "errors":"http"}
# TODO: Test the error mapping of http
/httpe/tout/mapped={"svc":"LONGOP", "notime":false, "conv":"json2ubf", "errors":"http",
	errors_fmt_http_map=13:404,*:200}

# just call sample service
#/svc2/hello=@CCONF

# Default
#errors=http|json|text|jsonubf

#
# For text and raw buffers
#
#errors_fmt_text=Error code %d (%s)

#
# Add to the end of the json block
#
#errors_fmt_json_msg=error_msg:"%s"
#errors_fmt_json_code=error_code:"%d"
#
# Print the code even response is ok
#
#errors_fmt_json_when_ok=1
#
# XX:YY
# XX - TP error
# YY - HTTP error
#
#errors_fmt_http_map=11:404,6:402,*:200

#
# TLS Settigs
#
;tls_enable=1|0
;tls_cert_file=/path/to/cert/file
;tls_key_file=/path/to/key/file
;
;
